{"version":3,"file":"index.js","mappings":"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","sources":["webpack://MolstarPlugin/webpack/universalModuleDefinition","webpack://MolstarPlugin/external umd \"molstar\"","webpack://MolstarPlugin/webpack/bootstrap","webpack://MolstarPlugin/webpack/runtime/define property getters","webpack://MolstarPlugin/webpack/runtime/hasOwnProperty shorthand","webpack://MolstarPlugin/webpack/runtime/make namespace object","webpack://MolstarPlugin/./src/react-shim.ts","webpack://MolstarPlugin/./src/components/MolstarViewer.tsx","webpack://MolstarPlugin/./src/jsx-runtime.ts","webpack://MolstarPlugin/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"molstar\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"molstar\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MolstarPlugin\"] = factory(require(\"molstar\"));\n\telse\n\t\troot[\"MolstarPlugin\"] = factory(root[\"molstar\"]);\n})(this, (__WEBPACK_EXTERNAL_MODULE__264__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__264__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// React shim for environments where React is not available\n// This provides minimal functionality to prevent runtime errors\n\nconst useRef = (initial: any) => ({ current: initial });\nconst useEffect = (effect: () => void | (() => void), deps?: any[]) => {\n  // In a non-React environment, we need a no-op effect system\n  return;\n};\n\n// Create a minimal React-like object that matches the expected interface\nconst React = {\n  useRef,\n  useEffect,\n  createElement: (type: any, props: any, ...children: any[]) => {\n    // Return a simple object that represents the element\n    return {\n      type,\n      props: { ...props, children },\n      key: props?.key || null,\n      ref: props?.ref || null\n    };\n  }\n};\n\nexport { useRef, useEffect };\nexport default React;","import React, { useEffect, useRef } from 'react';\nimport * as molstar from 'molstar';\n\nexport interface MolstarViewerProps {\n  id?: string;\n  className?: string;\n  style?: React.CSSProperties;\n  // Viewer configuration options\n  layoutShowControls?: boolean;\n  viewportShowExpand?: boolean;\n  collapseLeftPanel?: boolean;\n  pdbProvider?: string;\n  emdbProvider?: string;\n  volumeStreamingServer?: string;\n  pixelScale?: number;\n  pickScale?: number;\n  pickPadding?: number;\n  enableWboit?: boolean;\n  preferWebgl1?: boolean;\n  debugMode?: boolean;\n  // Loading options\n  snapshotId?: string;\n  snapshotUrl?: string;\n  snapshotUrlType?: string;\n  structureUrl?: string;\n  structureUrlFormat?: string;\n  structureUrlIsBinary?: boolean;\n  pdb?: string;\n  pdbDev?: string;\n  emdb?: string;\n  modelArchive?: string;\n  loadCommand?: string;\n  // Callbacks\n  onViewerReady?: (viewer: any) => void;\n  onError?: (error: Error) => void;\n}\n\nexport const MolstarViewer: React.FC<MolstarViewerProps> = ({\n  id = 'molstar-viewer',\n  className,\n  style,\n  layoutShowControls = true,\n  viewportShowExpand = false,\n  collapseLeftPanel = false,\n  pdbProvider = 'pdbe',\n  emdbProvider = 'pdbe',\n  volumeStreamingServer,\n  pixelScale = 1,\n  pickScale = 0.25,\n  pickPadding = 1,\n  enableWboit,\n  preferWebgl1,\n  debugMode = false,\n  snapshotId,\n  snapshotUrl,\n  snapshotUrlType = 'molj',\n  structureUrl,\n  structureUrlFormat,\n  structureUrlIsBinary = false,\n  pdb,\n  pdbDev,\n  emdb,\n  modelArchive,\n  loadCommand,\n  onViewerReady,\n  onError\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const viewerRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const initViewer = async () => {\n      try {\n        // Set debug mode if enabled\n        if (debugMode) {\n          molstar.setDebugMode(debugMode, debugMode);\n        }\n\n        // Determine volume streaming server\n        const defaultVolumeStreamingServer = volumeStreamingServer || \n          ((pdbProvider || 'pdbe') === 'rcsb' \n            ? 'https://maps.rcsb.org'\n            : 'https://www.ebi.ac.uk/pdbe/densities');\n\n        // Create viewer with configuration\n        const viewer = await molstar.Viewer.create(id, {\n          layoutShowControls,\n          viewportShowExpand,\n          collapseLeftPanel,\n          pdbProvider,\n          emdbProvider,\n          volumeStreamingServer: defaultVolumeStreamingServer,\n          pixelScale,\n          pickScale,\n          pickPadding: isNaN(pickPadding) ? 1 : pickPadding,\n          enableWboit: enableWboit ? true : undefined,\n          preferWebgl1,\n        });\n\n        viewerRef.current = viewer;\n\n        // Load content based on provided options\n        if (snapshotId) {\n          await viewer.setRemoteSnapshot(snapshotId);\n        }\n\n        if (snapshotUrl && snapshotUrlType) {\n          await viewer.loadSnapshotFromUrl(snapshotUrl, snapshotUrlType);\n        }\n\n        if (structureUrl) {\n          await viewer.loadStructureFromUrl(structureUrl, structureUrlFormat, structureUrlIsBinary);\n        }\n\n        if (pdb) {\n          await viewer.loadPdb(pdb);\n        }\n\n        if (pdbDev) {\n          await viewer.loadPdbDev(pdbDev);\n        }\n\n        if (emdb) {\n          await viewer.loadEmdb(emdb);\n        }\n\n        if (modelArchive) {\n          await viewer.loadModelArchive(modelArchive);\n        }\n\n        // Execute custom load command if provided\n        if (loadCommand) {\n          try {\n            // Safely evaluate the load command\n            const func = new Function('viewer', loadCommand);\n            func(viewer);\n          } catch (cmdError) {\n            console.warn('Error executing load command:', cmdError);\n          }\n        }\n\n        // Notify that viewer is ready\n        if (onViewerReady) {\n          onViewerReady(viewer);\n        }\n\n      } catch (error) {\n        console.error('Error initializing Molstar viewer:', error);\n        if (onError) {\n          onError(error as Error);\n        }\n      }\n    };\n\n    initViewer();\n\n    // Cleanup function\n    return () => {\n      if (viewerRef.current) {\n        try {\n          viewerRef.current.dispose?.();\n        } catch (error) {\n          console.warn('Error disposing viewer:', error);\n        }\n        viewerRef.current = null;\n      }\n    };\n  }, [\n    id, layoutShowControls, viewportShowExpand, collapseLeftPanel,\n    pdbProvider, emdbProvider, volumeStreamingServer, pixelScale,\n    pickScale, pickPadding, enableWboit, preferWebgl1, debugMode,\n    snapshotId, snapshotUrl, snapshotUrlType, structureUrl,\n    structureUrlFormat, structureUrlIsBinary, pdb, pdbDev,\n    emdb, modelArchive, loadCommand\n  ]);\n\n  const defaultStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: '100px',\n    top: '100px',\n    width: '800px',\n    height: '600px',\n    ...style\n  };\n\n  // Check if we're in a real React environment\n  if (typeof window !== 'undefined' && !(window as any).React) {\n    console.warn('MolstarViewer: React component used in non-React environment. Use MolstarPlugin.createViewer() instead.');\n    return null;\n  }\n\n  return (\n    <div\n      id={id}\n      ref={containerRef}\n      className={className}\n      style={defaultStyle}\n    />\n  );\n};\n\nexport default MolstarViewer;","// JSX runtime shim for environments where React is not available\n\nexport function jsx(type: any, props: any) {\n  // Return a simple object that represents the JSX element\n  return {\n    type,\n    props: props || {},\n    key: props?.key || null,\n    ref: props?.ref || null\n  };\n}\n\nexport function jsxs(type: any, props: any) {\n  // Same as jsx for our purposes\n  return jsx(type, props);\n}\n\nexport { jsx as jsxDEV };","// Re-export commonly used molstar types and utilities\nexport * as molstar from 'molstar';\n\n// Export React component for standalone development (when React is available)\n// Note: These exports will only work when React is available as a global variable\nexport { MolstarViewer, type MolstarViewerProps } from './components/MolstarViewer';\n\n// Utility function to parse URL parameters (extracted from original templates)\nexport function getParam(name: string, regex: string): string {\n  const r = new RegExp(name + '=' + '(' + regex + ')[&]?', 'i');\n  return decodeURIComponent(((window.location.search || '').match(r) || [])[1] || '');\n}\n\n// Configuration helper to parse common URL parameters\nexport interface ViewerConfig {\n  debugMode?: boolean;\n  hideControls?: boolean;\n  collapseLeftPanel?: boolean;\n  pdbProvider?: string;\n  emdbProvider?: string;\n  mapProvider?: string;\n  pixelScale?: number;\n  pickScale?: number;\n  pickPadding?: number;\n  disableWboit?: boolean;\n  preferWebgl1?: boolean;\n  snapshotId?: string;\n  snapshotUrl?: string;\n  snapshotUrlType?: string;\n  structureUrl?: string;\n  structureUrlFormat?: string;\n  structureUrlIsBinary?: boolean;\n  pdb?: string;\n  pdbDev?: string;\n  emdb?: string;\n  modelArchive?: string;\n}\n\nexport function parseUrlConfig(): ViewerConfig {\n  return {\n    debugMode: getParam('debug-mode', '[^&]+').trim() === '1',\n    hideControls: getParam('hide-controls', '[^&]+').trim() === '1',\n    collapseLeftPanel: getParam('collapse-left-panel', '[^&]+').trim() === '1',\n    pdbProvider: getParam('pdb-provider', '[^&]+').trim().toLowerCase() || undefined,\n    emdbProvider: getParam('emdb-provider', '[^&]+').trim().toLowerCase() || undefined,\n    mapProvider: getParam('map-provider', '[^&]+').trim().toLowerCase() || undefined,\n    pixelScale: parseFloat(getParam('pixel-scale', '[^&]+').trim()) || undefined,\n    pickScale: parseFloat(getParam('pick-scale', '[^&]+').trim()) || undefined,\n    pickPadding: (() => {\n      const val = parseFloat(getParam('pick-padding', '[^&]+').trim());\n      return isNaN(val) ? undefined : val;\n    })(),\n    disableWboit: getParam('disable-wboit', '[^&]+').trim() === '1',\n    preferWebgl1: getParam('prefer-webgl1', '[^&]+').trim() === '1' || undefined,\n    snapshotId: getParam('snapshot-id', '[^&]+').trim() || undefined,\n    snapshotUrl: getParam('snapshot-url', '[^&]+').trim() || undefined,\n    snapshotUrlType: getParam('snapshot-url-type', '[^&]+').toLowerCase().trim() || undefined,\n    structureUrl: getParam('structure-url', '[^&]+').trim() || undefined,\n    structureUrlFormat: getParam('structure-url-format', '[a-z]+').toLowerCase().trim() || undefined,\n    structureUrlIsBinary: getParam('structure-url-is-binary', '[^&]+').trim() === '1',\n    pdb: getParam('pdb', '[^&]+').trim() || undefined,\n    pdbDev: getParam('pdb-dev', '[^&]+').trim() || undefined,\n    emdb: getParam('emdb', '[^&]+').trim() || undefined,\n    modelArchive: getParam('model-archive', '[^&]+').trim() || undefined,\n  };\n}\n\n// Pure JavaScript helper for creating Molstar viewers (webview compatible)\nexport interface CreateViewerOptions {\n  elementId: string;\n  layoutShowControls?: boolean;\n  viewportShowExpand?: boolean;\n  collapseLeftPanel?: boolean;\n  pdbProvider?: string;\n  emdbProvider?: string;\n  volumeStreamingServer?: string;\n  pixelScale?: number;\n  pickScale?: number;\n  pickPadding?: number;\n  enableWboit?: boolean;\n  preferWebgl1?: boolean;\n  debugMode?: boolean;\n  // Loading options\n  snapshotId?: string;\n  snapshotUrl?: string;\n  snapshotUrlType?: string;\n  structureUrl?: string;\n  structureUrlFormat?: string;\n  structureUrlIsBinary?: boolean;\n  pdb?: string;\n  pdbDev?: string;\n  emdb?: string;\n  modelArchive?: string;\n  loadCommand?: string;\n}\n\nexport async function createViewer(options: CreateViewerOptions): Promise<any> {\n  const {\n    elementId,\n    layoutShowControls = true,\n    viewportShowExpand = false,\n    collapseLeftPanel = false,\n    pdbProvider = 'pdbe',\n    emdbProvider = 'pdbe',\n    volumeStreamingServer,\n    pixelScale = 1,\n    pickScale = 0.25,\n    pickPadding = 1,\n    enableWboit,\n    preferWebgl1,\n    debugMode = false,\n    snapshotId,\n    snapshotUrl,\n    snapshotUrlType = 'molj',\n    structureUrl,\n    structureUrlFormat,\n    structureUrlIsBinary = false,\n    pdb,\n    pdbDev,\n    emdb,\n    modelArchive,\n    loadCommand\n  } = options;\n\n  // Set debug mode if enabled\n  if (debugMode) {\n    (window as any).molstar.setDebugMode(debugMode, debugMode);\n  }\n\n  // Determine volume streaming server\n  const defaultVolumeStreamingServer = volumeStreamingServer || \n    ((pdbProvider || 'pdbe') === 'rcsb' \n      ? 'https://maps.rcsb.org'\n      : 'https://www.ebi.ac.uk/pdbe/densities');\n\n  // Create viewer with configuration\n  const viewer = await (window as any).molstar.Viewer.create(elementId, {\n    layoutShowControls,\n    viewportShowExpand,\n    collapseLeftPanel,\n    pdbProvider,\n    emdbProvider,\n    volumeStreamingServer: defaultVolumeStreamingServer,\n    pixelScale,\n    pickScale,\n    pickPadding: isNaN(pickPadding) ? 1 : pickPadding,\n    enableWboit: enableWboit ? true : undefined,\n    preferWebgl1,\n  });\n\n  // Load content based on provided options\n  if (snapshotId) {\n    await viewer.setRemoteSnapshot(snapshotId);\n  }\n\n  if (snapshotUrl && snapshotUrlType) {\n    await viewer.loadSnapshotFromUrl(snapshotUrl, snapshotUrlType);\n  }\n\n  if (structureUrl) {\n    await viewer.loadStructureFromUrl(structureUrl, structureUrlFormat, structureUrlIsBinary);\n  }\n\n  if (pdb) {\n    await viewer.loadPdb(pdb);\n  }\n\n  if (pdbDev) {\n    await viewer.loadPdbDev(pdbDev);\n  }\n\n  if (emdb) {\n    await viewer.loadEmdb(emdb);\n  }\n\n  if (modelArchive) {\n    await viewer.loadModelArchive(modelArchive);\n  }\n\n  // Execute custom load command if provided\n  if (loadCommand) {\n    try {\n      // Safely evaluate the load command\n      const func = new Function('viewer', loadCommand);\n      func(viewer);\n    } catch (cmdError) {\n      console.warn('Error executing load command:', cmdError);\n    }\n  }\n\n  return viewer;\n}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__264__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","useRef","initial","current","MolstarViewer","id","className","style","layoutShowControls","viewportShowExpand","collapseLeftPanel","pdbProvider","emdbProvider","volumeStreamingServer","pixelScale","pickScale","pickPadding","enableWboit","preferWebgl1","debugMode","snapshotId","snapshotUrl","snapshotUrlType","structureUrl","structureUrlFormat","structureUrlIsBinary","pdb","pdbDev","emdb","modelArchive","loadCommand","onViewerReady","onError","containerRef","defaultStyle","position","left","top","width","height","window","React","type","props","ref","console","warn","getParam","name","regex","RegExp","decodeURIComponent","location","search","match","parseUrlConfig","trim","hideControls","toLowerCase","mapProvider","parseFloat","val","isNaN","disableWboit","async","createViewer","options","elementId","molstar","setDebugMode","defaultVolumeStreamingServer","viewer","Viewer","create","setRemoteSnapshot","loadSnapshotFromUrl","loadStructureFromUrl","loadPdb","loadPdbDev","loadEmdb","loadModelArchive","Function","func","cmdError"],"sourceRoot":""}