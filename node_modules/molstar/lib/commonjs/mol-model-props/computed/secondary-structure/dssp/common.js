"use strict";
/**
 * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bridge = exports.BridgeType = exports.DSSPType = void 0;
const mol_util_1 = require("../../../../mol-util");
var DSSPType;
(function (DSSPType) {
    DSSPType.is = mol_util_1.BitFlags.has;
    DSSPType.create = mol_util_1.BitFlags.create;
    let Flag;
    (function (Flag) {
        Flag[Flag["_"] = 0] = "_";
        Flag[Flag["H"] = 1] = "H";
        Flag[Flag["B"] = 2] = "B";
        Flag[Flag["E"] = 4] = "E";
        Flag[Flag["G"] = 8] = "G";
        Flag[Flag["I"] = 16] = "I";
        Flag[Flag["S"] = 32] = "S";
        Flag[Flag["T"] = 64] = "T";
        Flag[Flag["T3"] = 128] = "T3";
        Flag[Flag["T4"] = 256] = "T4";
        Flag[Flag["T5"] = 512] = "T5";
        Flag[Flag["T3S"] = 1024] = "T3S";
        Flag[Flag["T4S"] = 2048] = "T4S";
        Flag[Flag["T5S"] = 4096] = "T5S";
    })(Flag = DSSPType.Flag || (DSSPType.Flag = {}));
})(DSSPType || (exports.DSSPType = DSSPType = {}));
var BridgeType;
(function (BridgeType) {
    BridgeType[BridgeType["PARALLEL"] = 0] = "PARALLEL";
    BridgeType[BridgeType["ANTI_PARALLEL"] = 1] = "ANTI_PARALLEL";
})(BridgeType || (exports.BridgeType = BridgeType = {}));
class Bridge {
    constructor(p1, p2, type) {
        this.partner1 = Math.min(p1, p2);
        this.partner2 = Math.max(p1, p2);
        this.type = type;
    }
}
exports.Bridge = Bridge;
